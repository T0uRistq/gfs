// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.grpc.examples.gfs";
option java_outer_classname = "HelloWorldProto";
option objc_class_prefix = "HLW";

package gfs;

service GFS {
  // Client -> Chunkserver
  rpc ReadChunk (ReadChunkRequest) returns (ReadChunkReply) {}
  rpc WriteChunk (WriteChunkRequest) returns (WriteChunkReply) {}
  rpc PushData (PushDataRequest) returns (PushDataReply) {}
  rpc Append (AppendRequest) returns (AppendReply) {}

  // Master -> Chunkserver
  rpc RemoveChunks (RemoveChunksRequest) returns (RemoveChunksReply) {}

  // Chunkserver -> Chunkserver
  rpc SerializedWrite (SerializedWriteRequest) returns (SerializedWriteReply) {}
}

message ReadChunkRequest {
  int64 chunkhandle = 1;
  int64 offset = 2;
  int64 length = 3;
}

message ReadChunkReply {
  string data = 1;
  int64 bytes_read = 2;
}

message WriteChunkRequest {
  int64 chunkhandle = 1;
  int64 offset = 2;
  repeated string locations = 3;
  // TODO: use string instead of int64_t for uuid
  int64 uuid = 4;
}

message WriteChunkReply {
  int64 bytes_written = 1;
}

message AppendRequest {
  int64 chunkhandle = 1;
  int64 length = 2;
  repeated string locations = 3;
  int64 uuid = 4;
}

message AppendReply {
  int64 offset = 1;
  int64 bytes_written = 2;
}

message PushDataRequest {
  string data = 1;
  int64 uuid = 2;
}

message PushDataReply {}

message SerializedWriteRequest {
  int64 chunkhandle = 1;
  int64 offset = 2;
  bool padded_chunk = 3;
  int64 uuid = 4;
}

message SerializedWriteReply {
  int64 bytes_written = 1;
}

message RemoveChunksRequest {
  // List of chunkhandles to remove.
  repeated int64 chunkhandles = 1;
}

message RemoveChunksReply {}

service GFSMaster {
  // Client -> Master
  // List all files with matching prefix
  rpc FindPath (FindPathRequest) returns (FindPathReply) {}
  // For a given filename and chunk index
  // returns the chunk handle and locations of replicas
  rpc FindLocations (FindLocationsRequest) returns (FindLocationsReply) {}
  // FindLocations
  // creates chunk if not exist
  rpc FindLeaseHolder (FindLeaseHolderRequest) returns (FindLeaseHolderReply) {}
  rpc MoveFile (MoveFileRequest) returns (MoveFileReply) {}
  rpc RemoveFile (RemoveFileRequest) returns (RemoveFileReply) {}
  rpc GetFileLength (GetFileLengthRequest) returns (GetFileLengthReply) {}

  // Chunkserver -> Master RPCs
  // Chunkserver should periodically ping master
  rpc HeartBeat (HeartBeatRequest) returns (HeartBeatReply) {}
}

message FindPathRequest {
  string prefix = 1;
}

message FindPathReply {
  message File {
    string filename = 1;
  }
  repeated File files = 1;
}

message FindLocationsRequest {
  string filename = 1;
  int64 chunk_index = 2;
}

message FindLocationsReply {
  int64 chunkhandle = 1;
  repeated string locations = 2;
}

message FindLeaseHolderRequest {
  string filename = 1;
  int64 chunk_index = 2;
}

message FindLeaseHolderReply {
  int64 chunkhandle = 1;
  repeated string locations = 2;
  string primary_location = 3;
}

message MoveFileRequest {
  string old_filename = 1;
  string new_filename = 2;
}

message MoveFileReply {}

message RemoveFileRequest {
  string filename = 1;
}

message RemoveFileReply {}

message GetFileLengthRequest {
  string filename = 1;
}

message GetFileLengthReply {
  int64 num_chunks = 1;
}

message HeartBeatRequest {
  message ChunkInfo {
    int64 chunkhandle = 1;
  }
  // All chunks stored in chunkserver.
  repeated ChunkInfo chunks = 1;
  string location = 2;
}

message HeartBeatReply {}
